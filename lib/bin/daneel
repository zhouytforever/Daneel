#!/usr/bin/env node

const download = require('download-git-repo')
const program = require('commander')
const ora = require('ora')
const chalk = require('chalk')
const path = require('path')
const home = require('user-home')
const tildify = require('tildify')
const exists = require('fs').existsSync
const logger = require('../lib/logger')
const generate = require('../lib/generate')
const localPath = require('../lib/local-path')

const isLocalPath = localPath.isLocalPath
const getTemplatePath = localPath.getTemplatePath
// const checkVersion = require('../lib/check-version')

/**
 * Usage.
 */

program
  .usage('<template-repo>')

/**
 * Help.
 */

program.on('--help', () => {
  console.log('  Examples:')
  console.log()
  console.log(chalk.gray('    # create a new model directly from a github template'))
  console.log('    $ daneel username/repo')
  console.log()
})

/**
 * Help.
 */

function help () {
  program.parse(process.argv)
  if (program.args.length < 1) return program.help()
}
help()

/**
 * Settings.
 */

let template = program.args[0]
const clone = program.clone || false
const hasSlash = template.indexOf('/') > -1
const rawName = program.args[1]
const inPlace = !rawName || rawName === '.'
const name = inPlace ? path.relative('../', process.cwd()) : rawName
const to = path.resolve(rawName || '.')

const tmp = path.join(home, '.daneel-templates', template.replace(/\//g, '-'))
if (program.offline) {
  console.log(`> Use cached template at ${chalk.yellow(tildify(tmp))}`)
  template = tmp
}
/**
 * Padding.
 */

process.on('exit', () => {
  console.log()
})

/**
 * Check, download and generate the project.
 */

function run () {
// check if template is local
  if (isLocalPath(template)) {
    const templatePath = getTemplatePath(template)
    if (exists(templatePath)) {
      generate(name, templatePath, to, err => {
        if (err) logger.fatal(err)
        console.log()
        logger.success('Generated "%s".', name)
      })
    } else {
      logger.fatal('Local template "%s" not found.', template)
    }
  } else {
    if (!hasSlash) {
      // use official templates
      const officialTemplate = 'zhouytforever/' + template
      if (template.indexOf('#') !== -1) {
        downloadAndGenerate(officialTemplate)
      } else {
        downloadAndGenerate(officialTemplate)
      }
    } else {
      downloadAndGenerate(template)
    }
  }
}

/**
 * Download a generate from a template repo.
 *
 * @param {String} template
 */

function downloadAndGenerate (template) {
  const spinner = ora('downloading template')
  spinner.start()
  download(template, './', { clone }, err => {
    spinner.stop()
    if (err) logger.fatal('Failed to download repo ' + template + ': ' + err.message.trim())
    generate('./name', './', './', err => {
      if (err) logger.fatal(err)
      console.log()
      logger.success(chalk.green('Generated successfully!'))
    })
  })
}

run()
